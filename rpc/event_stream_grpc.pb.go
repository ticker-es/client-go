// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: event_stream.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventStreamClient is the client API for EventStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventStreamClient interface {
	Emit(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Published, error)
	Stream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (EventStream_StreamClient, error)
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (EventStream_ListenClient, error)
	Subscribe(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (EventStream_SubscribeClient, error)
	Acknowledge(ctx context.Context, opts ...grpc.CallOption) (EventStream_AcknowledgeClient, error)
}

type eventStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewEventStreamClient(cc grpc.ClientConnInterface) EventStreamClient {
	return &eventStreamClient{cc}
}

func (c *eventStreamClient) Emit(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Published, error) {
	out := new(Published)
	err := c.cc.Invoke(ctx, "/ticker.rpc.EventStream/Emit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventStreamClient) Stream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (EventStream_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventStream_ServiceDesc.Streams[0], "/ticker.rpc.EventStream/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventStreamStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventStream_StreamClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type eventStreamStreamClient struct {
	grpc.ClientStream
}

func (x *eventStreamStreamClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventStreamClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (EventStream_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventStream_ServiceDesc.Streams[1], "/ticker.rpc.EventStream/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventStreamListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventStream_ListenClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type eventStreamListenClient struct {
	grpc.ClientStream
}

func (x *eventStreamListenClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventStreamClient) Subscribe(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (EventStream_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventStream_ServiceDesc.Streams[2], "/ticker.rpc.EventStream/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventStreamSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventStream_SubscribeClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type eventStreamSubscribeClient struct {
	grpc.ClientStream
}

func (x *eventStreamSubscribeClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventStreamClient) Acknowledge(ctx context.Context, opts ...grpc.CallOption) (EventStream_AcknowledgeClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventStream_ServiceDesc.Streams[3], "/ticker.rpc.EventStream/Acknowledge", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventStreamAcknowledgeClient{stream}
	return x, nil
}

type EventStream_AcknowledgeClient interface {
	Send(*Ack) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type eventStreamAcknowledgeClient struct {
	grpc.ClientStream
}

func (x *eventStreamAcknowledgeClient) Send(m *Ack) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eventStreamAcknowledgeClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventStreamServer is the server API for EventStream service.
// All implementations must embed UnimplementedEventStreamServer
// for forward compatibility
type EventStreamServer interface {
	Emit(context.Context, *Event) (*Published, error)
	Stream(*StreamRequest, EventStream_StreamServer) error
	Listen(*ListenRequest, EventStream_ListenServer) error
	Subscribe(*SubscriptionRequest, EventStream_SubscribeServer) error
	Acknowledge(EventStream_AcknowledgeServer) error
	mustEmbedUnimplementedEventStreamServer()
}

// UnimplementedEventStreamServer must be embedded to have forward compatible implementations.
type UnimplementedEventStreamServer struct {
}

func (UnimplementedEventStreamServer) Emit(context.Context, *Event) (*Published, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Emit not implemented")
}
func (UnimplementedEventStreamServer) Stream(*StreamRequest, EventStream_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedEventStreamServer) Listen(*ListenRequest, EventStream_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedEventStreamServer) Subscribe(*SubscriptionRequest, EventStream_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedEventStreamServer) Acknowledge(EventStream_AcknowledgeServer) error {
	return status.Errorf(codes.Unimplemented, "method Acknowledge not implemented")
}
func (UnimplementedEventStreamServer) mustEmbedUnimplementedEventStreamServer() {}

// UnsafeEventStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventStreamServer will
// result in compilation errors.
type UnsafeEventStreamServer interface {
	mustEmbedUnimplementedEventStreamServer()
}

func RegisterEventStreamServer(s grpc.ServiceRegistrar, srv EventStreamServer) {
	s.RegisterService(&EventStream_ServiceDesc, srv)
}

func _EventStream_Emit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventStreamServer).Emit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticker.rpc.EventStream/Emit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventStreamServer).Emit(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventStream_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventStreamServer).Stream(m, &eventStreamStreamServer{stream})
}

type EventStream_StreamServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type eventStreamStreamServer struct {
	grpc.ServerStream
}

func (x *eventStreamStreamServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _EventStream_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventStreamServer).Listen(m, &eventStreamListenServer{stream})
}

type EventStream_ListenServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type eventStreamListenServer struct {
	grpc.ServerStream
}

func (x *eventStreamListenServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _EventStream_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscriptionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventStreamServer).Subscribe(m, &eventStreamSubscribeServer{stream})
}

type EventStream_SubscribeServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type eventStreamSubscribeServer struct {
	grpc.ServerStream
}

func (x *eventStreamSubscribeServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _EventStream_Acknowledge_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventStreamServer).Acknowledge(&eventStreamAcknowledgeServer{stream})
}

type EventStream_AcknowledgeServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*Ack, error)
	grpc.ServerStream
}

type eventStreamAcknowledgeServer struct {
	grpc.ServerStream
}

func (x *eventStreamAcknowledgeServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eventStreamAcknowledgeServer) Recv() (*Ack, error) {
	m := new(Ack)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventStream_ServiceDesc is the grpc.ServiceDesc for EventStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ticker.rpc.EventStream",
	HandlerType: (*EventStreamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Emit",
			Handler:    _EventStream_Emit_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _EventStream_Stream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Listen",
			Handler:       _EventStream_Listen_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _EventStream_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Acknowledge",
			Handler:       _EventStream_Acknowledge_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "event_stream.proto",
}
